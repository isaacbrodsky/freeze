/**
 * 
 */
package com.isaacbrodsky.freeze.elements.oop;

/**
 * Messages are the OOP equivalent to IPC. Messages are used to notify an
 * element of situations it may wish to process. Messages are often generated by
 * other elements but in special circumstances can be generated by the board or
 * controller object.
 * 
 * <p>
 * Messages are immutable.
 * 
 * <p>
 * Messages are case insensitive, but count all characters as being a part of
 * the message. "SHOT " and "SHOT" are different messages, but "SHOT" and "shot"
 * are the same.
 * 
 * @author isaac
 */
public final class Message {
	public static final Message TOUCH = new Message("touch");
	public static final Message SHOT = new Message("shot");
	public static final Message BOMBED = new Message("bombed");
	public static final Message THUD = new Message("thud");
	public static final Message ENERGIZE = new Message("energize");

	// SuperZZT
	public static final Message HINT = new Message("hint");
	public static final Message ENTER = new Message("enter");

	/**
	 * This String is effectively the payload for this Message object.
	 * <p>
	 * Do not allow public modification of the message payload- messages are
	 * immutable.
	 */
	private final String msg;

	public Message(String s) {
		msg = s;
	}

	public String getMsg() {
		return msg;
	}

	public boolean isTouch() {
		return equals(TOUCH);
	}

	public boolean isShot() {
		return equals(SHOT);
	}

	public boolean isBombed() {
		return equals(BOMBED);
	}

	public boolean isThud() {
		return equals(THUD);
	}

	public boolean isEnegize() {
		return equals(ENERGIZE);
	}

	/**
	 * SuperZZT Built-in
	 * 
	 * @return
	 */
	public boolean isHint() {
		return equals(HINT);
	}

	/**
	 * SuperZZT Built-in
	 * 
	 * @return
	 */
	public boolean isEnter() {
		return equals(ENTER);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		// if o == null instanceof will return false.
		if (!(o instanceof Message))
			return false;

		Message that = (Message) o;
		return that.getMsg().equalsIgnoreCase(getMsg());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return msg.toLowerCase().hashCode();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return getMsg();
	}
}
